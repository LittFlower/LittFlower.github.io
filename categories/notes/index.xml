<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on 一只花盆.</title>
    <link>http://littflower.github.io/categories/notes/</link>
    <description>Recent content in Notes on 一只花盆.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Nov 2024 17:44:58 +0800</lastBuildDate><atom:link href="http://littflower.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qemu Pwn 入门与调试</title>
      <link>http://littflower.github.io/posts/qemu-pwn-debug-trick/</link>
      <pubDate>Sat, 30 Nov 2024 17:44:58 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/qemu-pwn-debug-trick/</guid>
      <description>前置知识 MMIO 和 PMIO 是 CPU 和外部设备之间两种互为补充的 I/O 方法。
MMIO (Memory-mapped I/O) PMIO (Port-mapped I/O) MMIO 让 CPU 访问外部设备就像访问磁盘虚拟内存空间一样方便，也就是说，内存和 I/O 设备共享同一个地址空间。当 CPU 使用 MMU 将虚拟内存空间地址转化时，可以转化成物理内存空间地址、也可以转化成 I/O 设备的内存。因此，用于访问内存的CPU指令也可来访问I/O设备。每个I/O设备监视CPU的地址总线，一旦CPU访问分配给它的地址，它就做出响应，将数据总线连接到需要访问的设备硬件寄存器。为了容纳 I/O 设备，CPU 必须预留给 I/O 一个地址区域，该地址区域不能给物理内存使用。
PMIO 在端口映射 IO 中，内存和 I/O 设备有各自的地址空间，PMIO 会使用特殊的 CPU 指令专门执行 I/O 操作，I/O设备有一个与内存不同的地址空间，为了实现地址空间的隔离，要么在CPU物理接口上增加一个I/O引脚，要么增加一条专用的I/O总线。由于I/O地址空间与内存地址空间是隔离的，所以有时将 PMIO 称为被隔离的 IO(Isolated I/O)。
如何实现 MMIO 在Linux中， 内核使用ioremap()将IO设备的物理内存地址映射到内核空间的虚拟地址上； 用户空间程序使用mmap(2)系统调用将IO设备的物理内存地址映射到用户空间的虚拟内存地址上，一旦映射完成，用户空间的一段内存就与IO设备的内存关联起来，当用户访问用户空间的这段内存地址范围时，实际上会转化为对IO设备的访问。
如何启动 以下是一个启动脚本 start.sh:
./qemu-system-x86_64 \ -m 1G \ -device strng \ -hda my-disk.img \ -hdb my-seed.img \ -nographic \ -L pc-bios/ \ -enable-kvm \ -device e1000,netdev=net0 \ -netdev user,id=net0,hostfwd=tcp::5555-:22 其中 -device 后面的是设备名。</description>
    </item>
    
    <item>
      <title>如何计算结构体字节数</title>
      <link>http://littflower.github.io/posts/how-to-calc-the-bytes-of-struct/</link>
      <pubDate>Wed, 15 May 2024 14:35:41 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/how-to-calc-the-bytes-of-struct/</guid>
      <description>计算结构体字节数的关键是搞明白字节对齐。
字节对齐是为了提高内存访问的效率与速度，它的细节和编译器实现有关，但一般而言，遵循以下规则：
结构体变量的首地址是结构体中最宽基本类型成员的大小的倍数； 结构体每个成员相对于结构体首地址的偏移量都是该成员内存大小的整数倍，也就是说相邻的两个不同类型的成员之间可能需要填充字节，填充至相邻两成员的最小公倍数； 结构体所占的总内存大小应为结构体中最宽基本类型成员的倍数，也就是可能在最后一个成员之后填充字节。 注意：结构体不算作基本类型成员。 按照这个规则，可以得出以下结构体所占的内存为 24 字节：
struct node { char a; // 1 字节，但会填充至 4 字节 int b; // 4 字节，至此共 8 字节，与 long long 相同，不需要填充 long long c; // 8 字节，至此共 16 字节 char d; // 1 字节，至此共 17 字节 // 结构体总大小必须为 8 的整数倍，所以填充至 24 字节 }; </description>
    </item>
    
    <item>
      <title>逆向结构体的经验</title>
      <link>http://littflower.github.io/posts/the-experience-of-reverse-struct/</link>
      <pubDate>Tue, 14 May 2024 14:43:08 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/the-experience-of-reverse-struct/</guid>
      <description>主要说一下怎么逆向 Pwn 题里常见的各种数据结构。
0x01. 数组 最简单的一种就是逆向数组，因为数组的形式在经过反编译之后会呈现出指针偏移的形式，e.g. *(p + offset)。
比如说下面这份代码：
int __fastcall main(int argc, const char **argv, const char **envp) { int i; // [rsp+4h] [rbp-Ch] __int64 v5; // [rsp+8h] [rbp-8h] for ( i = 0; i &amp;lt;= 9; ++i ) { *(4LL * i + v5) *= i * i; printf(&amp;#34;%d\n&amp;#34;, *(4LL * i + v5)); } return 0; } 看到这种 *(p + index * offset) 的形式，大概率这里的 v5 是个数组指针，稍微尝试一下，发现可以恢复成如下形式：</description>
    </item>
    
  </channel>
</rss>
