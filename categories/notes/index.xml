<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on 一只花盆.</title>
    <link>http://littflower.github.io/categories/notes/</link>
    <description>Recent content in Notes on 一只花盆.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 May 2025 00:31:27 +0800</lastBuildDate><atom:link href="http://littflower.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>_IO_FILE 任意地址读写攻击面分析</title>
      <link>http://littflower.github.io/posts/iofile%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E8%AF%BB%E5%86%99%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 08 May 2025 00:31:27 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/iofile%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E8%AF%BB%E5%86%99%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90/</guid>
      <description>简介 FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。 FILE 结构在程序执行 fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 FILE 结构的指针来接收这个返回值。
在标准 I/O 库中，每个程序启动时有三个文件流是自动打开的：stdin、stdout、stderr。因此在初始状态下，_IO_list_all 指向了一个有这些文件流构成的链表，但是需要注意的是这三个文件流位于 libc.so 的数据段。而我们使用 fopen 创建的文件流是分配在堆内存上的。
FILE 的结构这里不再详细描述了，之前学 apple 的时候已经看过了，简单来说在 pwndbg 调试时，可以 p _IO_2_1_stdin 查看它们的详细结构。
这里主要介绍一下比较常用的指针：
_IO_buf_base：输入（出）缓冲区的基地址，例如 _IO_file_xsgetn 函数会通过它来判断输入缓冲区是否为空，为空则会调用 _IO_doallocbuf 函数来进行初始化。 _IO_buf_end：输入（出）缓冲区的结束地址。 在建立输入输出缓冲区后，如果缓冲区作为输入缓冲区使用，则会将 _IO_buf_base 基地址赋值给 _IO_read_base，结束地址 _IO_buf_end 赋值给 _IO_read_end
_IO_read_ptr：指向当前已经写入的地址。 _IO_read_base：输入缓冲区的基地址。 _IO_read_end：一般和 _IO_read_ptr 共同使用，_IO_read_end-_IO_read_ptr 表示可用的输入缓冲区大小。 如果缓冲区作为输出缓冲区使用则同理。
而我们在 CTF 题目中非常常见的一个初始化函数是：
setvbuf(stdin, 0LL, 2, 0LL); setvbuf(stdout, 0LL, 2, 0LL); setvbuf(stderr, 0LL, 2, 0LL); 这个函数的作用是设置 _IO_buf_end - _IO_buf_base = 1，这样的效果是缓冲区长度只有 1，也就是 1 字节输入/出一次。</description>
    </item>
    
    <item>
      <title>Glibc Exit 函数分析与利用</title>
      <link>http://littflower.github.io/posts/glibc-exit-function-analyze-and-attack/</link>
      <pubDate>Tue, 01 Apr 2025 00:59:36 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/glibc-exit-function-analyze-and-attack/</guid>
      <description>源码分析 用的源码是 glibc 2.35 的，具体版本是 Ubuntu GLIBC 2.35-0ubuntu3.9，在 glibc all in one 里可以下载到。
调试信息我是用 docker 下载的，然后拷出来在我的 arch linux 上慢慢调试。
exit 函数定义在 glibc 的 stdlib/exit.c 中，如下：
void exit (int status) { __run_exit_handlers (status, &amp;amp;__exit_funcs, true, true); } libc_hidden_def (exit) 有一个很重要的结构 __exit_funcs，如下：
enum { ef_free,	/* `ef_free&amp;#39; MUST be zero! */ ef_us, ef_on, ef_at, ef_cxa }; struct exit_function // 析构函数的类型，可以是 {ef_free, ef_us, ef_on, ef_at, ef_cxa} 之一 { // ef_free 表示此位置空闲 // ef_us 表示此位置被占用，但是不知道函数类型 // ef_on ef_at ef_cxa 都表示了具体的函数类型，差别在参数上 /* `flavour&amp;#39; should be of type of the `enum&amp;#39; above but since we need this element in an atomic operation we have to use `long int&amp;#39;.</description>
    </item>
    
    <item>
      <title>Pwn 随机数攻击</title>
      <link>http://littflower.github.io/posts/pwn-random-attack/</link>
      <pubDate>Sat, 14 Dec 2024 18:09:23 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/pwn-random-attack/</guid>
      <description>介绍 随机数攻击
主要阅读了 glibc rand 相关的源代码，总结一下 CTF 中常见随机数攻击手法，主要还是打伪随机数预测。
常见写法 以 C 语言的 rand() 为例，主要写法如下：
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;time.h&amp;gt; void gen_random_plus() { srand(time(0)); printf(&amp;#34;%d\n&amp;#34;, rand()); return; } int main() { int seed; srand(seed); printf(&amp;#34;%d\n&amp;#34;, rand()); return 0; } 调用 rand() 函数会返回一个 [0,RAND_MAX] 中的随机非负整数，其中 RAND_MAX 是标准库中的一个宏，在 Linux 系统下 RAND_MAX 等于 $2^{31}-1$。可以用取模来限制所生成的数的大小。
使用 rand() 需要一个随机数种子，可以使用 srand(seed) 函数来将随机种子更改为 seed，当然不初始化也是可以的。
同一程序使用相同的 seed 两次运行，在同一机器、同一编译器下，随机出的结果将会是相同的。
有一个选择是使用当前系统时间来作为随机种子：srand(time(0))。
还有用 linux 的 random 和 urandom 设备的，写法大概如下：
#include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;sys/stat.</description>
    </item>
    
    <item>
      <title>Qemu Pwn 入门与调试</title>
      <link>http://littflower.github.io/posts/qemu-pwn-debug-trick/</link>
      <pubDate>Sat, 30 Nov 2024 17:44:58 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/qemu-pwn-debug-trick/</guid>
      <description>前置知识 MMIO 和 PMIO 是 CPU 和外部设备之间两种互为补充的 I/O 方法。
MMIO (Memory-mapped I/O) PMIO (Port-mapped I/O) MMIO 让 CPU 访问外部设备就像访问磁盘虚拟内存空间一样方便，也就是说，内存和 I/O 设备共享同一个地址空间。当 CPU 使用 MMU 将虚拟内存空间地址转化时，可以转化成物理内存空间地址、也可以转化成 I/O 设备的内存。因此，用于访问内存的CPU指令也可来访问I/O设备。每个I/O设备监视CPU的地址总线，一旦CPU访问分配给它的地址，它就做出响应，将数据总线连接到需要访问的设备硬件寄存器。为了容纳 I/O 设备，CPU 必须预留给 I/O 一个地址区域，该地址区域不能给物理内存使用。
PMIO 在端口映射 IO 中，内存和 I/O 设备有各自的地址空间，PMIO 会使用特殊的 CPU 指令专门执行 I/O 操作，I/O设备有一个与内存不同的地址空间，为了实现地址空间的隔离，要么在CPU物理接口上增加一个I/O引脚，要么增加一条专用的I/O总线。由于I/O地址空间与内存地址空间是隔离的，所以有时将 PMIO 称为被隔离的 IO(Isolated I/O)。
如何实现 MMIO 在Linux中， 内核使用ioremap()将IO设备的物理内存地址映射到内核空间的虚拟地址上； 用户空间程序使用mmap(2)系统调用将IO设备的物理内存地址映射到用户空间的虚拟内存地址上，一旦映射完成，用户空间的一段内存就与IO设备的内存关联起来，当用户访问用户空间的这段内存地址范围时，实际上会转化为对IO设备的访问。
如何启动 以下是一个启动脚本 start.sh:
./qemu-system-x86_64 \ -m 1G \ -device strng \ -hda my-disk.img \ -hdb my-seed.img \ -nographic \ -L pc-bios/ \ -enable-kvm \ -device e1000,netdev=net0 \ -netdev user,id=net0,hostfwd=tcp::5555-:22 其中 -device 后面的是设备名。</description>
    </item>
    
    <item>
      <title>如何计算结构体字节数</title>
      <link>http://littflower.github.io/posts/how-to-calc-the-bytes-of-struct/</link>
      <pubDate>Wed, 15 May 2024 14:35:41 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/how-to-calc-the-bytes-of-struct/</guid>
      <description>计算结构体字节数的关键是搞明白字节对齐。
字节对齐是为了提高内存访问的效率与速度，它的细节和编译器实现有关，但一般而言，遵循以下规则：
结构体变量的首地址是结构体中最宽基本类型成员的大小的倍数； 结构体每个成员相对于结构体首地址的偏移量都是该成员内存大小的整数倍，也就是说相邻的两个不同类型的成员之间可能需要填充字节，填充至相邻两成员的最小公倍数； 结构体所占的总内存大小应为结构体中最宽基本类型成员的倍数，也就是可能在最后一个成员之后填充字节。 注意：结构体不算作基本类型成员。 按照这个规则，可以得出以下结构体所占的内存为 24 字节：
struct node { char a; // 1 字节，但会填充至 4 字节 int b; // 4 字节，至此共 8 字节，与 long long 相同，不需要填充 long long c; // 8 字节，至此共 16 字节 char d; // 1 字节，至此共 17 字节 // 结构体总大小必须为 8 的整数倍，所以填充至 24 字节 }; </description>
    </item>
    
    <item>
      <title>逆向结构体的经验</title>
      <link>http://littflower.github.io/posts/the-experience-of-reverse-struct/</link>
      <pubDate>Tue, 14 May 2024 14:43:08 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/the-experience-of-reverse-struct/</guid>
      <description>主要说一下怎么逆向 Pwn 题里常见的各种数据结构。
0x01. 数组 最简单的一种就是逆向数组，因为数组的形式在经过反编译之后会呈现出指针偏移的形式，e.g. *(p + offset)。
比如说下面这份代码：
int __fastcall main(int argc, const char **argv, const char **envp) { int i; // [rsp+4h] [rbp-Ch] __int64 v5; // [rsp+8h] [rbp-8h] for ( i = 0; i &amp;lt;= 9; ++i ) { *(4LL * i + v5) *= i * i; printf(&amp;#34;%d\n&amp;#34;, *(4LL * i + v5)); } return 0; } 看到这种 *(p + index * offset) 的形式，大概率这里的 v5 是个数组指针，稍微尝试一下，发现可以恢复成如下形式：</description>
    </item>
    
  </channel>
</rss>
