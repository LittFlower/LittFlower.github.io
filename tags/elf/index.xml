<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ELF on 一只花盆.</title>
    <link>http://littflower.github.io/tags/elf/</link>
    <description>Recent content in ELF on 一只花盆.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 May 2025 15:17:45 +0800</lastBuildDate><atom:link href="http://littflower.github.io/tags/elf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ELF 文件结构详解</title>
      <link>http://littflower.github.io/posts/elf-structure/</link>
      <pubDate>Wed, 21 May 2025 15:17:45 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/elf-structure/</guid>
      <description>简介 本文在不特殊声明的情况下，默认架构为 x86-64，操作系统内核为 linux
ELF（Executable and Linkable Format） 是 linux 平台上的目标文件，主要有以下三种类型：
可重定位文件（Relocatable File），后缀名 .o，这种文件一般和其他目标文件一起被链接器链接成可执行文件或者共享目标文件 可执行文件（Executable File），一般无后缀名，就是我们平常在 linux 中可以运行的程序 共享目标文件（Shared Object File），后缀名 .so，就是我们常说的“库文件” ELF 的文件结构如下图所示：
这是一张很经典的用来讲解 ELF 文件结构的图，ELF 文件结构主要是从两方面解析：执行视图和链接视图。从 ELF 文件的全名也可看出，一个合法的 ELF 文件既有可能参与链接，也有可能直接执行。
文件结构 宏观视图 链接视图
文件开始处是 ELF Header 接下来是程序头部表，不过在链接视图下（也就是 ELF 文件参与链接时），这个部分是可选的 若干个节区（Section，简称“节”） 节区头部表，包含了描述文件节区的信息，每个节区在表中都有一个表项，会给出节区名称、节区大小等信息。用于链接的目标文件必须有节区头部表。 执行视图
文件开始处是 ELF Header 程序头部表，它会告诉系统如何创建进程。用于生成进程的目标文件必须具有程序头部表。 若干个段 节区头部表，这个部分是可选的。 注意，所谓“链接视图”和“执行视图”其实是看待 ELF 文件的两种不同的视角，实际上在一个合法的 ELF 文件中，二者是完全重合的，也就是本文第一张图。
我们把上面两种视图结合起来分析，其实 sections 和 segments 在 ELF 中占用的是一样的地方，其中，sections 是程序员可见的，是给链接器使用的概念，而 segments 是程序员不可见的，是给加载器使用的概念。一般来讲，一个 segement 可以包含多个 sections
另外，尽管这些图中是按照 ELF 头，程序头部表，节区，节区头部表的顺序排列的，但实际上除了 ELF 头部表以外，其它部分都没有严格的的顺序。</description>
    </item>
    
  </channel>
</rss>
