<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>foolctf2024 on 一只花盆.</title>
    <link>http://littflower.github.io/tags/foolctf2024/</link>
    <description>Recent content in foolctf2024 on 一只花盆.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2024 18:49:09 +0800</lastBuildDate><atom:link href="http://littflower.github.io/tags/foolctf2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>foolctf 2024 WriteUp 和一些关于 shellcode 的反思</title>
      <link>http://littflower.github.io/posts/t1d_foolctf-2024-writeups/</link>
      <pubDate>Tue, 09 Apr 2024 18:49:09 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/t1d_foolctf-2024-writeups/</guid>
      <description>愚人节的时候 t1d 在群里扔了两道题，说是愚人节ctf&amp;hellip;
做了之后发现自己是愚人了
facker 题目分析 先来看看程序主体逻辑：
en&amp;hellip;. 大概读一遍可以确定这是个 orw 题，不过一个巨大的 random 糊在脸上预示着这题可能不太好打，下面有个 encrypt 函数，会一次加密 16 字节，跟进去看看：
这个加密算法分两部分，前半部分可以识别出是个 base64 的 decode，后半部分是用刚才读的随机数异或编码 16 字节的前 12 字节。
一开始想着能不能把 random 给绕了，但是 t1d 肯定防了这个：
fd = open(&amp;#34;/dev/random&amp;#34;, 0); for ( i = 0; i != 16; i = strlen(buf) ) read(fd, buf, 0x10uLL); 这个写法会防止读 random 时首字节为空字节导致的截断问题。所以这东西肯定是绕不了了。
再者，关于这个 base64，可以注意到这个 decode 并没有直接在 a1 上做，也就是并没有修改我们输进去的 orw，真正修改 orw 的是后面的异或运算。
（这里我狠狠踩坑了，做题的时候处于逆向习惯一直在想着怎么逆这东西，其实从宏观一点的角度思考就会发现没有修改 orw 的 base64 decode() 我们是完全可以不用理会的）
总结一下，可以输入 66 个字节，前 2 个字节不作处理，之后的 64 个字节分为 4 组，每组只修改了 16 个字节的前 12 个字节。</description>
    </item>
    
  </channel>
</rss>
