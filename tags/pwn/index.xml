<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwn on 一只花盆.</title>
    <link>http://littflower.github.io/tags/pwn/</link>
    <description>Recent content in Pwn on 一只花盆.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Apr 2024 22:33:57 +0800</lastBuildDate><atom:link href="http://littflower.github.io/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UnbreakableCTF2024题解及反思</title>
      <link>http://littflower.github.io/posts/unbreakablectf2024-writeup/</link>
      <pubDate>Mon, 08 Apr 2024 22:33:57 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/unbreakablectf2024-writeup/</guid>
      <description>Unbreakable CTF 2024 Pwn WriteUps 和 NAN 的队友一起打了 UnbreakableCTF 2024 的二进制方向，动手做了两道题，口胡了一道堆题，有一些感悟和反思放在这里。
harder_assembly 思路 一道 x64 的shellcode 题，难点是禁止在 shellcode 里使用 syscall 以及shellcode 长度只有 15 字节。
后者比较好解决，可以考虑直接调用 read 构造二次输入，这样二次输入的时候就没有长度限制了，构造 orw 即可。
这里我遇到的知识盲区主要是禁用了 syscall，解决方法是使用 int 0x80（即继续使用 x32 API）
翻了一下 stackoverflow，注意到这样一段话：
When called from a 64-bit program it behaves the same way it would behave like if it has been called from a 32-bit program (using the 32-bit calling convention).
This also means that the parameters for &amp;ldquo;int 0x80&amp;rdquo; will be passed in 32-bit registers and the upper 32 bits of the 64-bit registers are ignored.</description>
    </item>
    
    <item>
      <title>AsisCTF2016 b00ks 复现笔记</title>
      <link>http://littflower.github.io/posts/asisctf2016-b00ks/</link>
      <pubDate>Tue, 23 Jan 2024 00:25:35 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/asisctf2016-b00ks/</guid>
      <description>记一道 offbyone 堆题的复现、反思与总结 复现 题目介绍 题目链接
菜单题，选单如下，其中 create 功能会创建一个 book，edit 功能只能修改 book 的 description，print 功能会打印 book 的 id/name/description/author, delete 功能会 free 掉 book name/book description/book self ：
1. Create a book 2. Delete a book 3. Edit a book 4. Print book detail 5. Change current author name 6. Exit 题目每创建一个 book，会涉及到两个用于维护的数据结构：一个是 book struct 本身，一个是 book list。
book struct 结构如下，每个 book struct 耗用内存空间大小为 0x20：
struct book { int id; char *name; char *description; int size; } book list 则是用来存放 book 的数组，主要用在 delete a book 和 edit a book 功能中。</description>
    </item>
    
    <item>
      <title>MoeCTF 2023 Pwn 题目复现</title>
      <link>http://littflower.github.io/posts/moectf-2023-pwn-writeup/</link>
      <pubDate>Sun, 12 Nov 2023 18:08:44 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/moectf-2023-pwn-writeup/</guid>
      <description>MoeCTF2023 Pwn WriteUp 前言 今年暑假比较摆烂&amp;hellip; 最后也没做完 MoeCTF 的 pwn 题, 只能赛后抽时间复现一遍. 复现一遍之后还是复习了不少知识点, 写一篇 wp 以作笔记.
题目复现 test_nc 连接即可.
baby_calculator emmm 打一个交互就可以了.
fd fd 即 file descripter, 又叫文件描述符, 它是一个抽象的指示符, 用一个非负整数表示.它指向了由系统内核维护的一个 file table 中的某个条目 ( entry ), 后者又指向储存文件真实地址的 inode table.
一般来说操作系统会为每个用户进程预留三个默认的 fd: stdin, stdout, stderr. 它们对应的非负整数值分别为 0, 1, 2. 之后的 fd 从 3 开始分配.
反编译得到核心代码:
fd = open(&amp;#34;./flag&amp;#34;, 0, 0LL); new_fd = (4 * fd) | 0x29A; dup2(fd, new_fd); // 将 new_fd 重定向到 fd close(fd); puts(&amp;#34;Which file do you want to read?</description>
    </item>
    
    <item>
      <title>2022强网杯青少赛题解</title>
      <link>http://littflower.github.io/posts/2022-qwbqs-writeup/</link>
      <pubDate>Fri, 03 Feb 2023 21:27:43 +0000</pubDate>
      
      <guid>http://littflower.github.io/posts/2022-qwbqs-writeup/</guid>
      <description>Qwb-青少赛-2022-WP 前言 蒟蒻来写 WP 了&amp;hellip;&amp;hellip; 本来应该是可以进线下的&amp;hellip;奈何工具太老旧&amp;hellip;明年再努力吧.
顺带一提，没补 pwn 题（（（
别问我为什么现在才发
Misc misc题实在是做麻了
misc 题思路都是对的&amp;hellip;脚本假了&amp;hellip;
Misc1 题目链接：Link
首先拿到一个 png 图片，用 010 editor 查看，根据文件头可以发现它是交换了奇偶数位顺序后的加密图片。
50 89 47 4E 0A 0D 0A 1A 00 00 0D 00 48 49 52 44 00 00 BD 02 00 00 6D 02 06 08 00 00 3B 00 C8 1A 00 F7 00 01 49 00 41 44 78 54 EC 9C D9 FD 1C 93 于是第一步解密：</description>
    </item>
    
  </channel>
</rss>
