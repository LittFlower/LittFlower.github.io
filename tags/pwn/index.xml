<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwn on 一只花盆.</title>
    <link>http://littflower.github.io/tags/pwn/</link>
    <description>Recent content in Pwn on 一只花盆.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Apr 2025 15:50:55 +0800</lastBuildDate><atom:link href="http://littflower.github.io/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ACTF2025 WriteUps</title>
      <link>http://littflower.github.io/posts/actf2025-writeups/</link>
      <pubDate>Sun, 27 Apr 2025 15:50:55 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/actf2025-writeups/</guid>
      <description>本次 ACTF 我基本上 24 h 打满了，队伍里一共出了三道 pwn，我参与做了两道，另外一道 qemu pwn 没出，这里写一下 WriteUp。
only_read 题目很简洁，只给了一个不限长度的 read，保护如下：
Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x3fe000) RUNPATH: b&amp;#39;.&amp;#39; SHSTK: Enabled IBT: Enabled Stripped: No 看到这个保护肯定是想打 ret2dlresolve 的，但是题目里没有 pop rdi; ret 这种 gadget，所以我这边的思路是打 magic gadget。
我选择了下面这两条 gadget：
libc 里：0x0000000000110a46: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 程序中：0x000000000040111c : add dword ptr [rbp - 0x3d], ebx ; nop ; ret 其中第一条是因为倒数第三字节和 libc 中 read 的偏移是一样的，不需要更多的爆破，第二条则是经典的 magic_gadget，两条配合起来可以做一个任意地址写原语。</description>
    </item>
    
    <item>
      <title>RITsecCTF2025 WriteUp</title>
      <link>http://littflower.github.io/posts/ritsecctf2025-writeup/</link>
      <pubDate>Tue, 08 Apr 2025 10:28:47 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/ritsecctf2025-writeup/</guid>
      <description>跟 n1 junior 的师傅们一起打了这场比赛，4 道出了 3 道，简单记录一下。
bit_burger 思路比较简单，利用了函数调用/返回后不会清理栈空间的特性，先通过第一个位操作在栈上构造一个 backdoor 地址出来，第二步直接调用就可以了。
#!/usr/bin/env python3 from pwn import * from sys import argv proc = &amp;#34;bit_burger.bin_patched&amp;#34; context.log_level = &amp;#34;debug&amp;#34; context.binary = proc elf = ELF(proc, checksec=False) libc = ELF(&amp;#34;./libc.so.6&amp;#34;, checksec=False) io = remote(&amp;#34;binex-bitburger.ctf.ritsec.club&amp;#34;, 32200) if argv[1] == &amp;#39;r&amp;#39; else process(proc) if args.G: gdb.attach(io, &amp;#34;b *0x401598&amp;#34;) ogg = 0x401355 s = &amp;#34;0&amp;#34; + bin(ogg)[2:] for i in range(len(s)): if s[len(s) - i - 1] == &amp;#34;1&amp;#34;: io.</description>
    </item>
    
    <item>
      <title>Glibc Exit 函数分析与利用</title>
      <link>http://littflower.github.io/posts/glibc-exit-function-analyze-and-attack/</link>
      <pubDate>Tue, 01 Apr 2025 00:59:36 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/glibc-exit-function-analyze-and-attack/</guid>
      <description>源码分析 用的源码是 glibc 2.35 的，具体版本是 Ubuntu GLIBC 2.35-0ubuntu3.9，在 glibc all in one 里可以下载到。
调试信息我是用 docker 下载的，然后拷出来在我的 arch linux 上慢慢调试。
exit 函数定义在 glibc 的 stdlib/exit.c 中，如下：
void exit (int status) { __run_exit_handlers (status, &amp;amp;__exit_funcs, true, true); } libc_hidden_def (exit) 有一个很重要的结构 __exit_funcs，如下：
enum { ef_free,	/* `ef_free&amp;#39; MUST be zero! */ ef_us, ef_on, ef_at, ef_cxa }; struct exit_function // 析构函数的类型，可以是 {ef_free, ef_us, ef_on, ef_at, ef_cxa} 之一 { // ef_free 表示此位置空闲 // ef_us 表示此位置被占用，但是不知道函数类型 // ef_on ef_at ef_cxa 都表示了具体的函数类型，差别在参数上 /* `flavour&amp;#39; should be of type of the `enum&amp;#39; above but since we need this element in an atomic operation we have to use `long int&amp;#39;.</description>
    </item>
    
    <item>
      <title>UTCTF2025 Writeup</title>
      <link>http://littflower.github.io/posts/utctf2025-writeup/</link>
      <pubDate>Sun, 16 Mar 2025 00:44:32 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/utctf2025-writeup/</guid>
      <description>国赛前一天的一个国际赛，跟 N1 junior 的师傅们一起打一下。
Tic Tac Toe 全都是 gets，baby pwn
无限制的栈溢出可以随便打，溢出一下，覆盖掉 player 的那个 int 就可以 win 了
没写 exp，就不贴了。
RETirement Plan 存在一个对字母的检查，__ctype_b_loc 这个函数见到几次了，它返回的是指向字符属性表的指针，一般写法是 (*__ctype_b_loc())[v5[i]] &amp;amp; 0x100，可以保证线程安全。
题目有个无限制的 gets，还有个格式化字符串，而且没开 NX，所以可以先打印一个栈地址然后返回 main，再读入 shellcode 在栈上执行。
#!/usr/bin/env python3 from pwn import * from sys import argv proc = &amp;#34;./shellcode_patched&amp;#34; context.log_level = &amp;#34;debug&amp;#34; context.binary = proc elf = ELF(proc, checksec=False) libc = ELF(&amp;#34;./libc.so.6&amp;#34;, checksec=False) io = remote(&amp;#39;challenge.utctf.live&amp;#39;,9009) if argv[1] == &amp;#39;r&amp;#39; else process(proc) if args.G: gdb.</description>
    </item>
    
    <item>
      <title>WinjaCTF2025 WriteUp</title>
      <link>http://littflower.github.io/posts/winjactf2025-writeup/</link>
      <pubDate>Mon, 03 Mar 2025 16:27:41 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/winjactf2025-writeup/</guid>
      <description>逆天比赛没有 pwn 题，无敌了。
Aura 前一天问我来不来打，我一看 ctftime 权重有 13，感觉还行，就来打了。
结果一上号
👴：我 Pwn 题呢？
👴：垃圾比赛。
Aura：垃圾比赛。
后来从 Reverse 的分区里翻出来一道 Pwn 题，那就做一下吧。
TheChamberofSecrets 程序比较简单，给了一个可执行文件，没给 libc 之类的，这其实很逆天，后面会考。
ida 打开：
__int64 __fastcall main(int a1, char **a2, char **a3) { _BYTE v4[36]; // [rsp+0h] [rbp-30h] BYREF _BYTE v5[4]; // [rsp+24h] [rbp-Ch] BYREF size_t len; // [rsp+28h] [rbp-8h] printf(&amp;#34;Say the Magic Word: &amp;#34;); __isoc99_scanf(&amp;#34;%s&amp;#34;, v5); len = getpagesize(); if ( mprotect((-len &amp;amp; &amp;amp;func1), len, 7) == -1 || mprotect((-len &amp;amp; &amp;amp;func2), len, 7) == -1 ) { perror(&amp;#34;mprotect&amp;#34;); return 1LL; } else { xor(&amp;amp;func1, xor, v5); if ( (func1)(v4) ) { xor(&amp;amp;func2, xor, v4); (func2)(); } else { puts(&amp;#34;Door remains locked!</description>
    </item>
    
    <item>
      <title>西湖论剑 2025 Pwn WriteUp</title>
      <link>http://littflower.github.io/posts/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-2025-pwn-writeup/</link>
      <pubDate>Thu, 20 Feb 2025 08:22:27 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-2025-pwn-writeup/</guid>
      <description>人生第一次打西湖论剑，虽然是跟着 401 的师傅只看了看题，但是感觉还是有一点收获的。
赛后复现 ak 了本场，在这里记录一下。
Vpwn 比较简单的栈虚拟机，逆向无难度，给了任意栈地址读写原语，先泄漏 libc 然后修改返回地址即可。
#!/usr/bin/env python3 from pwn import * from sys import argv proc = &amp;#34;./Vpwn_patched&amp;#34; context.log_level = &amp;#34;debug&amp;#34; context.binary = proc elf = ELF(proc, checksec=False) libc = ELF(&amp;#34;./libc.so.6&amp;#34;, checksec=False) io = remote(&amp;#34;&amp;#34;, ) if argv[1] == &amp;#39;r&amp;#39; else process(proc) if args.G: gdb.attach(io, &amp;#34;&amp;#34;&amp;#34; decompiler connect ida --host localhost --port 3662 breakrva 0x17d0 &amp;#34;&amp;#34;&amp;#34;) def choose(op): io.sendlineafter(b&amp;#34;Enter your choice: &amp;#34;, str(op).encode()) def edit(idx, value): choose(1) io.</description>
    </item>
    
    <item>
      <title>Pwn 随机数攻击</title>
      <link>http://littflower.github.io/posts/pwn-random-attack/</link>
      <pubDate>Sat, 14 Dec 2024 18:09:23 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/pwn-random-attack/</guid>
      <description>介绍 随机数攻击
主要阅读了 glibc rand 相关的源代码，总结一下 CTF 中常见随机数攻击手法，主要还是打伪随机数预测。
常见写法 以 C 语言的 rand() 为例，主要写法如下：
#include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;time.h&amp;gt; void gen_random_plus() { srand(time(0)); printf(&amp;#34;%d\n&amp;#34;, rand()); return; } int main() { int seed; srand(seed); printf(&amp;#34;%d\n&amp;#34;, rand()); return 0; } 调用 rand() 函数会返回一个 [0,RAND_MAX] 中的随机非负整数，其中 RAND_MAX 是标准库中的一个宏，在 Linux 系统下 RAND_MAX 等于 $2^{31}-1$。可以用取模来限制所生成的数的大小。
使用 rand() 需要一个随机数种子，可以使用 srand(seed) 函数来将随机种子更改为 seed，当然不初始化也是可以的。
同一程序使用相同的 seed 两次运行，在同一机器、同一编译器下，随机出的结果将会是相同的。
有一个选择是使用当前系统时间来作为随机种子：srand(time(0))。
还有用 linux 的 random 和 urandom 设备的，写法大概如下：
#include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;sys/stat.</description>
    </item>
    
    <item>
      <title>2024 强网杯青少赛线下游记</title>
      <link>http://littflower.github.io/posts/2024-qwbqs-final-travels/</link>
      <pubDate>Mon, 09 Dec 2024 16:23:39 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/2024-qwbqs-final-travels/</guid>
      <description>去郑州玩了两天，线下面了一堆师傅
Day-? 本来都不记得这个事情了，但是 Aura 上离散数学课的时候突然问我来着，于是跟 Aura 和树木一起组队打了线上赛。
但是话又说回来了，Aura 打线上那天咕咕了，去打他那个 b 鹏城杯了，导致我跟树木 2 打 3，web 基本上没做，好在不影响进线下。这是前话。
Day -1 提前买了飞去郑州的机票，由于我不想在飞机上吃那个 b 飞机餐，所以特意买了早一点的飞机，但是时间非常阴间，早上 7 点就得走，Aura 说让我 6 点起，有点幽默哈。
晚上两点睡的。
Day 0 结果当然是起不了一点
定了个闹铃，早上七点的时候把全宿舍人吵醒了（（ 闹麻了。
提前一个多小时就把值机什么的办好了，和 Aura 在机场里找了一家 KFC，吃了顿早餐（好吃而且价格正常），打了两把炉石，期间被偷拍了（
没事，我也拍了 Aura：
闹麻了。
飞机上比较无聊，我因为完全没睡醒，飞机上继续睡，aura 应该也在睡。
中午 12 点左右出机场，坐出租车去酒店。比较难绷的是酒店位置很离谱，不在市区，打出租车过去要 160。
我跟司机师傅说要开发票（主办方报销），师傅说车费 160 给我开 200 的，给我整乐了（（（
下午在酒店里收拾了一下。这个时候场馆里还在打强网杯，打算等他们打完了过去找师傅们面基。于是成功面基到了 GZ 师傅，空白，还有 miaotony 和 gets 师傅（
没面到 n1 的师傅真可惜&amp;hellip;.
晚上吃饭的时候，沾 Aura 的光，面到了星盟的师傅们，还要到了微信（（但是面的很尴尬，因为完全不熟（（（
还有一些逆天偷拍哥（说的就是你，多多！
晚上特别难绷，因为我发现我跟树木他们学校的指导老师一个房间
👴：能不能给我换个房间啊&amp;hellip; 真是一秒钟都待不下去了
晚秋：来我房间，教你 awdp
👴：我超义父！
好好好，于是去晚秋和 zjl 的房间，学了一会 awdp，然后聊了一下发展规划（（</description>
    </item>
    
    <item>
      <title>Qemu Pwn 入门与调试</title>
      <link>http://littflower.github.io/posts/qemu-pwn-debug-trick/</link>
      <pubDate>Sat, 30 Nov 2024 17:44:58 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/qemu-pwn-debug-trick/</guid>
      <description>前置知识 MMIO 和 PMIO 是 CPU 和外部设备之间两种互为补充的 I/O 方法。
MMIO (Memory-mapped I/O) PMIO (Port-mapped I/O) MMIO 让 CPU 访问外部设备就像访问磁盘虚拟内存空间一样方便，也就是说，内存和 I/O 设备共享同一个地址空间。当 CPU 使用 MMU 将虚拟内存空间地址转化时，可以转化成物理内存空间地址、也可以转化成 I/O 设备的内存。因此，用于访问内存的CPU指令也可来访问I/O设备。每个I/O设备监视CPU的地址总线，一旦CPU访问分配给它的地址，它就做出响应，将数据总线连接到需要访问的设备硬件寄存器。为了容纳 I/O 设备，CPU 必须预留给 I/O 一个地址区域，该地址区域不能给物理内存使用。
PMIO 在端口映射 IO 中，内存和 I/O 设备有各自的地址空间，PMIO 会使用特殊的 CPU 指令专门执行 I/O 操作，I/O设备有一个与内存不同的地址空间，为了实现地址空间的隔离，要么在CPU物理接口上增加一个I/O引脚，要么增加一条专用的I/O总线。由于I/O地址空间与内存地址空间是隔离的，所以有时将 PMIO 称为被隔离的 IO(Isolated I/O)。
如何实现 MMIO 在Linux中， 内核使用ioremap()将IO设备的物理内存地址映射到内核空间的虚拟地址上； 用户空间程序使用mmap(2)系统调用将IO设备的物理内存地址映射到用户空间的虚拟内存地址上，一旦映射完成，用户空间的一段内存就与IO设备的内存关联起来，当用户访问用户空间的这段内存地址范围时，实际上会转化为对IO设备的访问。
如何启动 以下是一个启动脚本 start.sh:
./qemu-system-x86_64 \ -m 1G \ -device strng \ -hda my-disk.img \ -hdb my-seed.img \ -nographic \ -L pc-bios/ \ -enable-kvm \ -device e1000,netdev=net0 \ -netdev user,id=net0,hostfwd=tcp::5555-:22 其中 -device 后面的是设备名。</description>
    </item>
    
    <item>
      <title>2024 强网杯青少赛线上赛题解</title>
      <link>http://littflower.github.io/posts/2024-qwbqs-writeup/</link>
      <pubDate>Mon, 25 Nov 2024 16:55:35 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/2024-qwbqs-writeup/</guid>
      <description>前言 战队名：crazyNAN
战队排名：6
战队整体答题情况：除 web 方向 cyberboard mysqlprobe 外均解出。
这辈子最后一次打强网杯青少赛了，因为我今年刚满 18 岁（（（
一开始把这事情都忘了，还是 Aura 师傅拉我我才想起来，打着玩玩，话又说回来初赛和这 b Aura 有个🥚的关系啊（（
全靠 👴 和 🌳 带飞（
杂鱼 Aura
Wp 赛时开了个飞书云文档，边打边写 wp，感觉确实不错，不用赛后专门整理 wp 了。
我这里就把我做的 pwn 题发一下，剩下的可以戳这个链接看 exp
Pwn clock_in 板子 ret2libc，exp:
from pwn import * from sys import argv proc = &amp;#34;./clock_in&amp;#34; context.log_level = &amp;#34;debug&amp;#34; context.binary = proc elf = ELF(proc, checksec=False) libc = ELF(&amp;#34;./libc.so.6&amp;#34;) io = remote(&amp;#34;101.200.61.16&amp;#34;, 34841) if argv[1] == &amp;#39;r&amp;#39; else process(proc) if args.</description>
    </item>
    
    <item>
      <title>论文笔记《AddressSanitizer: A Fast Address Sanity Checker》</title>
      <link>http://littflower.github.io/posts/paper-notes-of-addresssanitizer-a-fast-address-sanity-checker/</link>
      <pubDate>Mon, 21 Oct 2024 19:14:44 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/paper-notes-of-addresssanitizer-a-fast-address-sanity-checker/</guid>
      <description>0x00. Abstract 对于 C 和 C++ 等编程语言来说，内存访问错误（包括缓冲区溢出和 use after free）仍然是一个严重问题。存在许多内存错误检测器，但大多数检测器要么速度慢，要么局限于有限的错误集，或者两者兼而有之。本文介绍了 AddressSanitizer，一种新的内存错误检测器。这个工具可以查找对堆、堆栈和全局变量的越界访问，以及 use after free。它采用专门的内存分配器和代码工具，足够简单，可以在任何编译器、二进制翻译系统甚至硬件中实现。AddressSanitizer 在不牺牲全面性的情况下实现了效率。它的平均速度仅为 73%，但它可以在错误发生时准确地检测到错误。它在 Chromium 浏览器中发现了 300 多个以前未知的错误，以及其他软件中的许多错误。
0x01. Introduction AddressSanitizer 由两部分组成：检测模块和运行时库。检测模块修改代码以检查每次内存访问的影子态 (shadow state)，并在堆栈和全局对象周围创建中毒红区以检测向上或向下溢出。当前的实现基于 LLVM 编译器基础设施。运行时库替换了 malloc、free 和相关函数，在分配的堆区域周围创建中毒红区，延迟已释放堆区域的重用，并进行错误报告。
总的来说，这篇文章做了以下几件事：
说明了内存错误检测器可以利用影子内存 shadow memory的全面性，并且开销比传统方法低得多； 提出一种新颖的影子态编码方式，可实现紧凑的影子内存（高达 128-to-1），用于检测越界和 use-after-free 错误； 描述一个针对新实现的影子编码的专用内存分配器； 评估一个新的公开可用的工具，该工具可以有效地识别内存错误。 0x02. Related work 影子内存（shadow memory） 总的来说，按照对应用程序地址的处理可以把现有的工具分为两种：
通过直接缩放和偏移（其中完整应用程序地址空间映射到单个影子地址空间）； 通过涉及查表的额外转换来映射到影子地址空间。 直接缩放和偏移的例子有：
TaintTrace LIFT 使用多级转换的例子有：
Valgrind Dr.Memory 还有一些比较 trick 的工具：
Umbra：兼顾布局灵活性和效率，使用可动态调整的缩放和偏移来直接映射地址而非使用查表的方式； BoundLess：利用 64 位寄存器的高 16 位来做到内存复用，但是在慢速路径下会退化； LBC：使用存储在应用程序内存中的特殊值执行快速路径的检查，并在慢速路径上依赖于两级影子内存。 实现 大部分内存检测工具都基于二进制文件，这些工具可以发现堆内存的越界和 UAF，还可以识别未初始化的读取，不过没办法识别堆栈和全局变量的越界错误，好消息是基本不会误报。例如：Valgrind，Dr.Memory，Discover，BoundsChecker 等等
而使用编译时检测的工具虽然可以检测堆栈对象的越界访问，但是无法检测所有的堆栈缓冲区溢出错误，而且可能误报，例如 Mudflap。</description>
    </item>
    
    <item>
      <title>T1DCTF2024 WriteUp</title>
      <link>http://littflower.github.io/posts/t1dctf2024-writeup/</link>
      <pubDate>Tue, 14 May 2024 14:36:43 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/t1dctf2024-writeup/</guid>
      <description>补一下二队内测题。
repeater [easy] Repeater
As is well known, CTFers are all repeaters!
栈溢出题目，sub_11C9() 可以栈溢出，只修改返回地址的 1 字节，可以做到 partial overwrite 无限循环 sub_11C9() 读入 payload。
这里讲一下 fread 等 FILE 相关函数，后面也会用到。
C 语言 FILE 函数
既然没有空字符阶段，printf 就会把 retaddr 打印出来，从而获得 pie base。
接下来的问题是怎么泄漏 libc，ropper 发现程序没有一个能用来控制 rdi 的 gadgets，细心会发现程序在结束 printf 后寄存器 rdi 上居然还保存着 libc 函数的地址，那直接 call puts 就可以泄漏了。
from pwn import * proc = &amp;#34;./pwn&amp;#34; context.binary = proc context.log_level = &amp;#34;debug&amp;#34; io = process(proc) # io = remote(&amp;#34;tld1027.</description>
    </item>
    
    <item>
      <title>foolctf 2024 WriteUp 和一些关于 shellcode 的反思</title>
      <link>http://littflower.github.io/posts/t1d_foolctf-2024-writeups/</link>
      <pubDate>Tue, 09 Apr 2024 18:49:09 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/t1d_foolctf-2024-writeups/</guid>
      <description>愚人节的时候 t1d 在群里扔了两道题，说是愚人节ctf&amp;hellip;
做了之后发现自己是愚人了
facker 题目分析 先来看看程序主体逻辑：
en&amp;hellip;. 大概读一遍可以确定这是个 orw 题，不过一个巨大的 random 糊在脸上预示着这题可能不太好打，下面有个 encrypt 函数，会一次加密 16 字节，跟进去看看：
这个加密算法分两部分，前半部分可以识别出是个 base64 的 decode，后半部分是用刚才读的随机数异或编码 16 字节的前 12 字节。
一开始想着能不能把 random 给绕了，但是 t1d 肯定防了这个：
fd = open(&amp;#34;/dev/random&amp;#34;, 0); for ( i = 0; i != 16; i = strlen(buf) ) read(fd, buf, 0x10uLL); 这个写法会防止读 random 时首字节为空字节导致的截断问题。所以这东西肯定是绕不了了。
再者，关于这个 base64，可以注意到这个 decode 并没有直接在 a1 上做，也就是并没有修改我们输进去的 orw，真正修改 orw 的是后面的异或运算。
（这里我狠狠踩坑了，做题的时候处于逆向习惯一直在想着怎么逆这东西，其实从宏观一点的角度思考就会发现没有修改 orw 的 base64 decode() 我们是完全可以不用理会的）
总结一下，可以输入 66 个字节，前 2 个字节不作处理，之后的 64 个字节分为 4 组，每组只修改了 16 个字节的前 12 个字节。</description>
    </item>
    
    <item>
      <title>Unbreakable CTF 2024题解及反思</title>
      <link>http://littflower.github.io/posts/unbreakablectf2024-writeup/</link>
      <pubDate>Mon, 08 Apr 2024 22:33:57 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/unbreakablectf2024-writeup/</guid>
      <description>Unbreakable CTF 2024 Pwn WriteUps 和 NAN 的队友一起打了 UnbreakableCTF 2024 的二进制方向，动手做了两道题，口胡了一道堆题，有一些感悟和反思放在这里。
harder_assembly 思路 一道 x64 的shellcode 题，难点是禁止在 shellcode 里使用 syscall 以及shellcode 长度只有 15 字节。
后者比较好解决，可以考虑直接调用 read 构造二次输入，这样二次输入的时候就没有长度限制了，构造 orw 即可。
这里我遇到的知识盲区主要是禁用了 syscall，解决方法是使用 int 0x80（即继续使用 x32 API）
翻了一下 stackoverflow，注意到这样一段话：
When called from a 64-bit program it behaves the same way it would behave like if it has been called from a 32-bit program (using the 32-bit calling convention).
This also means that the parameters for &amp;ldquo;int 0x80&amp;rdquo; will be passed in 32-bit registers and the upper 32 bits of the 64-bit registers are ignored.</description>
    </item>
    
    <item>
      <title>AsisCTF2016 b00ks 复现笔记</title>
      <link>http://littflower.github.io/posts/asisctf2016-b00ks/</link>
      <pubDate>Tue, 23 Jan 2024 00:25:35 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/asisctf2016-b00ks/</guid>
      <description>记一道 offbyone 堆题的复现、反思与总结 复现 题目介绍 题目链接
菜单题，选单如下，其中 create 功能会创建一个 book，edit 功能只能修改 book 的 description，print 功能会打印 book 的 id/name/description/author, delete 功能会 free 掉 book name/book description/book self ：
1. Create a book 2. Delete a book 3. Edit a book 4. Print book detail 5. Change current author name 6. Exit 题目每创建一个 book，会涉及到两个用于维护的数据结构：一个是 book struct 本身，一个是 book list。
book struct 结构如下，每个 book struct 耗用内存空间大小为 0x20：
struct book { int id; char *name; char *description; int size; } book list 则是用来存放 book 的数组，主要用在 delete a book 和 edit a book 功能中。</description>
    </item>
    
    <item>
      <title>MoeCTF 2023 Pwn 题目复现</title>
      <link>http://littflower.github.io/posts/moectf-2023-pwn-writeup/</link>
      <pubDate>Sun, 12 Nov 2023 18:08:44 +0800</pubDate>
      
      <guid>http://littflower.github.io/posts/moectf-2023-pwn-writeup/</guid>
      <description>MoeCTF2023 Pwn WriteUp 前言 今年暑假比较摆烂&amp;hellip; 最后也没做完 MoeCTF 的 pwn 题, 只能赛后抽时间复现一遍. 复现一遍之后还是复习了不少知识点, 写一篇 wp 以作笔记.
题目复现 test_nc 连接即可.
baby_calculator emmm 打一个交互就可以了.
fd fd 即 file descripter, 又叫文件描述符, 它是一个抽象的指示符, 用一个非负整数表示.它指向了由系统内核维护的一个 file table 中的某个条目 ( entry ), 后者又指向储存文件真实地址的 inode table.
一般来说操作系统会为每个用户进程预留三个默认的 fd: stdin, stdout, stderr. 它们对应的非负整数值分别为 0, 1, 2. 之后的 fd 从 3 开始分配.
反编译得到核心代码:
fd = open(&amp;#34;./flag&amp;#34;, 0, 0LL); new_fd = (4 * fd) | 0x29A; dup2(fd, new_fd); // 将 new_fd 重定向到 fd close(fd); puts(&amp;#34;Which file do you want to read?</description>
    </item>
    
    <item>
      <title>2022强网杯青少赛题解</title>
      <link>http://littflower.github.io/posts/2022-qwbqs-writeup/</link>
      <pubDate>Fri, 03 Feb 2023 21:27:43 +0000</pubDate>
      
      <guid>http://littflower.github.io/posts/2022-qwbqs-writeup/</guid>
      <description>Qwb-青少赛-2022-WP 前言 蒟蒻来写 WP 了&amp;hellip;&amp;hellip; 本来应该是可以进线下的&amp;hellip;奈何工具太老旧&amp;hellip;明年再努力吧.
顺带一提，没补 pwn 题（（（
别问我为什么现在才发
Misc misc题实在是做麻了
misc 题思路都是对的&amp;hellip;脚本假了&amp;hellip;
Misc1 题目链接：Link
首先拿到一个 png 图片，用 010 editor 查看，根据文件头可以发现它是交换了奇偶数位顺序后的加密图片。
50 89 47 4E 0A 0D 0A 1A 00 00 0D 00 48 49 52 44 00 00 BD 02 00 00 6D 02 06 08 00 00 3B 00 C8 1A 00 F7 00 01 49 00 41 44 78 54 EC 9C D9 FD 1C 93 于是第一步解密：</description>
    </item>
    
    <item>
      <title>TPCTF2025 WriteUp</title>
      <link>http://littflower.github.io/posts/tpctf2025-writeup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://littflower.github.io/posts/tpctf2025-writeup/</guid>
      <description>和 n1 的师傅一起打了这场比赛，由于不会 web pwn 和 iot，这场基本上只能打签到堆题wwww
师傅们 tql
ezdb Glibc 2.35，洞在这里：
__int16 __fastcall TablePage::InsertRecord(TablePage *this, Record *record) { int Size; // [rsp+10h] [rbp-10h] int v4; // [rsp+14h] [rbp-Ch] Size = Record::GetSize(record); if ( TablePage::GetFreeSpaceSize(this) &amp;lt; (Size + 4LL) ) return -1; LOWORD(v4) = this-&amp;gt;end - Size - this-&amp;gt;page; HIWORD(v4) = Size; *this-&amp;gt;start = v4; this-&amp;gt;start = (this-&amp;gt;start + 4); memcpy(this-&amp;gt;end - Size, record-&amp;gt;content, Size); // off by one this-&amp;gt;end = (this-&amp;gt;end - Size); return (LOWORD(this-&amp;gt;start) - 4 - LOWORD(this-&amp;gt;page)) &amp;gt;&amp;gt; 2; } 这个地方有一个溢出，可以修改 Page 的 length，这个 length 会被用在后面 show 和 edit 功能里，例如 edit：</description>
    </item>
    
  </channel>
</rss>
